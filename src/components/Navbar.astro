---
import IconMenu from "@/Icons/IconMenu.astro";
import IconClose from "@/Icons/IconClose.astro";
import IconShow from "@/Icons/IconShow.astro";
import { LANGUAGES } from "@/i18n";

const { currentLocale, i18n } = Astro.props;
---

<nav>
  <div class="nav-mobile">
    <ul class="idiomas boton-uno">
      {
        Object.values(LANGUAGES).map(({ code, flag, name }) => {
          const Bandera = flag;

          return code === currentLocale ? (
            <li>
              <a
                aria-label="Change Language"
                href={`${code === "en" ? "/" : `/${code}/`}`}
              >
                <Bandera width="20" height="20" />
                {name}
                <IconShow class="icon" width="20" height="20" />
              </a>
            </li>
          ) : null;
        })
      }

      {
        Object.values(LANGUAGES).map(({ code, flag, name }) => {
          const Bandera = flag;

          return code !== currentLocale ? (
            <li>
              <a
                href={`${code === "en" ? "/" : `/${code}/`}`}
                aria-label="Change Language"
              >
                <Bandera width="20" height="20" />
                {name}
              </a>
            </li>
          ) : null;
        })
      }
    </ul>

    <div class="iconos">
      <div class="icon">
        <IconMenu width="100%" height="100%" />
      </div>
      <div class="icon mobile">
        <IconClose width="100%" height="100%" />
      </div>
    </div>
  </div>

  <ul class="menu mobile">
    {
      Object.values(i18n.SECTION_NAVBAR).map((item) => {
        return (
          <li>
            <a href={`#${item}`} aria-label={`Go to ${item}`}>
              {item}
            </a>
          </li>
        );
      })
    }
  </ul>
</nav>

<style>
  nav {
    position: fixed;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    max-width: 876px;
    width: calc(100% - 56px);
    min-height: 42px;
    margin: auto;
    border-radius: 8px;
    top: 20px;
    left: 0;
    right: 0;
    z-index: 10;
    padding: 16px 12px;
    box-shadow: 0 0 25px rgb(0 0 0 / 0.15);
    background-color: var(--color-terciario);
    transition: transform 0.3s ease;
    user-select: none;

    @media (width >= 601px) {
      flex-direction: row;
    }
  }

  .nav-mobile {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .idiomas {
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 12px;
    position: relative;
    z-index: 20;
    padding: 0 16px;
    margin: 0;

    @media (width <= 600px) {
      padding: 0;
    }

    @media (hover: hover) {
      &:hover li:last-child {
        transform: translateY(45px);
      }

      &:hover li:first-child .icon {
        transform: rotate(-180deg);
      }
    }

    @media (hover: none) {
      .icon {
        display: none;
      }
    }

    li {
      width: 150px;

      @media (hover: none) {
        width: 125px;
      }

      a {
        opacity: 1;
      }
    }

    li:first-child {
      z-index: 20;
      pointer-events: none;

      .icon {
        transition: transform 0.3s ease;
      }
    }

    li:last-child {
      position: absolute;
      z-index: 1;
      transform: translateY(0px);
      transition: transform 0.3s ease;
      padding: 0;
      margin: auto;
    }
  }

  .iconos {
    display: flex;
    justify-content: end;

    @media (width >= 601px) {
      display: none;
    }

    .icon {
      width: 40px;
      height: 40px;
    }

    path {
      color: var(--texto-color);
    }
  }

  .menu {
    display: flex;
    flex-direction: column;
    gap: 10px;
    justify-content: space-between;
    max-width: 900px;
    padding: 32px 0px 0px;
    margin: 0;

    @media (min-width: 601px) {
      display: flex;
      flex-direction: row;
      align-items: center;
      padding: 0px 16px;
      max-width: 600px;
    }

    & li a {
      display: block;
      border: 3px solid transparent;
      border-radius: 0;
      padding: 4px;

      &:hover {
        color: var(--color-primario);
      }

      &.active {
        border-bottom: 3px solid var(--color-primario);
      }
    }
  }

  .mobile {
    @media (width <= 600px) {
      display: none;
    }
  }
</style>

<script>
  const menu = document.querySelector(".menu");
  const buttons = document.querySelectorAll(".iconos .icon");
  const menuItems = document.querySelectorAll(".menu li");
  const sections = document.querySelectorAll("section, footer");

  let isMenuOpen = false;

  function detectarSection() {
    const sectionActive = document.querySelector(".section-active");

    sections.forEach((section) => {
      const { top, bottom } = section.getBoundingClientRect();

      const visiblePart =
        Math.min(window.innerHeight, bottom) - Math.max(0, top);

      if (visiblePart > window.innerHeight / 2) {
        section.classList.add("section-active");
      } else {
        section.classList.remove("section-active");
      }
    });

    menuItems.forEach((item) => {
      const itemText = item.textContent.trim();
      const button = item.querySelector("a");

      if (itemText === sectionActive?.id) {
        button.classList.add("active");
      } else {
        button.classList.remove("active");
      }
    });
  }

  buttons.forEach((button) => {
    button.addEventListener("click", () => {
      isMenuOpen = !isMenuOpen;
      if (isMenuOpen) {
        menu.classList.remove("mobile");
      } else {
        menu.classList.add("mobile");
      }

      buttons.forEach((button) => {
        button.classList.toggle("mobile");
      });
    });
  });

  menuItems.forEach((item) => {
    item.addEventListener("click", () => {
      isMenuOpen = false;
      menu.classList.add("mobile");

      buttons.forEach((button) => {
        button.classList.toggle("mobile");
      });
    });
  });

  document.addEventListener("scroll", detectarSection);
  detectarSection();
</script>
